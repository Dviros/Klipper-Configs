################## Based on the amazing work made by 3DPrintBeginner ###################
# Full guide: https://3dprintbeginner.com/how-to-install-klipper-on-sidewinder-x2/#
# And also: #
# https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02?fbclid=IwAR0rDS-75BpV0W0z_s2fxm3JsC6ik6PmdErTma460Pjyd_sYOU06-Rrkfxk #
# Please be aware of the negative Z offset mentioned below

[extruder]
max_extrude_only_distance: 100.0
max_extrude_cross_section: 50.0
step_pin: PA7
dir_pin: PA6
enable_pin: !PC4
microsteps: 16
rotation_distance: 7.1910
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
control: pid
pid_Kp: 23.223
pid_Ki: 1.518
pid_Kd: 88.826
min_temp: 0
max_temp: 250
pressure_advance = 0.05

[input_shaper]
shaper_freq_x: 43.26
shaper_freq_y: 45.28
shaper_type: mzv

[stepper_x]
step_pin: !PB14
dir_pin: PB13
enable_pin: !PB15
microsteps: 16
rotation_distance: 40
endstop_pin: !PA2
position_endstop: 0
position_max: 220
homing_speed: 50

[stepper_y]
step_pin: PB10
dir_pin: PB2
enable_pin: !PB12
microsteps: 16
rotation_distance: 40
endstop_pin: !PA1
position_endstop: 0
position_max: 220
homing_speed: 50

[stepper_z]
step_pin: PB0
dir_pin: !PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 250
position_min: -5

[heater_bed]
heater_pin: PA8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
control: pid
pid_Kp: 23.223
pid_Ki: 1.518
pid_Kd: 88.826
min_temp: 0
max_temp: 130

[fan]
pin: PC6
pin: PC8

[heater_fan hotend_fan]
pin: PC7
heater: extruder
heater_temp: 50.0

[controller_fan stepper_fan]
pin: PC6
idle_timeout: 300

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f401xc_17002E001751383435373136-if00
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 4000
max_accel_to_decel: 4000
max_z_velocity: 5
square_corner_velocity: 5.0
max_z_accel: 100

[bltouch]
sensor_pin: PC2
control_pin: PC3
x_offset:27.25
y_offset:-12.8
#z_offset:0.25
speed:10
samples:1
samples_result:average

[bed_mesh]
speed: 800
mesh_min: 30, 20
mesh_max: 190, 190
probe_count: 5,5
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.2
move_check_distance: 3.0
split_delta_z: .010
fade_start: 1.0
fade_end: 5.0

[safe_z_home]
home_xy_position: 110,110
speed: 100
z_hop: 10
z_hop_speed: 5

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro G29]
variable_area_start : 0,0
variable_area_end : 0,0
gcode:
 BED_MESH_CLEAR
 G28
 BED_MESH_CALIBRATE area_start={params.area_start} area_end={params.area_end}
 BED_MESH_PROFILE SAVE=x1


[gcode_macro G35]
gcode:
     G28
     SCREWS_TILT_CALCULATE
	 
[gcode_macro M701]
gcode:
    SAVE_GCODE_STATE NAME=loading_filament
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Loading Fil."
    M83
    G92 E0.0
    MIN_TEMP_CHECK
    G1 E{params.FEED_LENGTH|default(10)|int} F200    ; slow feed filament
    G1 E{params.FAST_LOAD_LENGTH|default(50)|int} F2000    ; Fast load to cold zone
    G1 E{params.SLOW_LOAD_LENGTH|default(50)|int} F100     ; Slow load to nozzle
    G92 E0.0
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Ready"
    RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro M702]
gcode:
    SAVE_GCODE_STATE NAME=unloading_filament
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Unloading Fil."
    MIN_TEMP_CHECK
    G91 ; set relative
    G1 E{params.FEED_LENGTH|default(10)|int} F100 
    G92 E0.0
    G1 E-{params.FAST_UNLOAD_LENGTH|default(70)|int} F2000  ; fast unload
    G92 E0.0
    G1 E-{params.SLOW_UNLOAD_LENGTH|default(40)|int} F1000  ; slow unload
    G92 E0.0
    PLAY_SINGLE_FEEDBACK_SOUND
    PRINT MSG="Ready"
    RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro M600]
gcode:
    PAUSE
    PRINT MSG="Filament change!"

[gcode_macro M900]
gcode:
    SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)|float}

[gcode_macro START_PRINT]
variable_bed_temp: 60
variable_extruder_temp: 200
variable_area_start : 0,0
variable_area_end : 0,0
variable_filament_type : "PLA"
gcode:
    CLEAR_PAUSE
    M220 S100 ; reset feedrate
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=1
	G28
    
    G90
    G0 X90 Y90 Z50 F3000 

    PRINT MSG="Waiting for temperatures"
    ; preheat temp
    M140 S{params.bed_temp|default(60)|float - 10}
    M104 S150

    ; wait
    M190 S{params.bed_temp|default(60)|float - 10}

    ; set real temp
    M140 S{params.bed_temp|default(60)|float}
    M104 S{params.extruder_temp|default(200)|float}

    ; wait
    M190 S{params.bed_temp|default(60)|float}
    M109 S{params.extruder_temp|default(200)|float}

    PRINT MSG="Homing Z..."
    G28 Z ;re-home Z
    BED_MESH_CALIBRATE area_start={params.area_start|default("0,0")} area_end={params.area_end|default("0,0")}
    ;BED_MESH_PROFILE LOAD="default"

    SET_FILAMENT_PROFILE TYPE={params.filament_type|default("PLA")}

    PRINT MSG="Prime Line"
	M117 Purge extruder
    G92 E0 ;Reset Extruder
    G1 Z1.0 F3000 ; move z up little to prevent scratching of surface
    G1 X2 Y20 Z0.3 F5000.0 ; move to start-line position
    G1 X2 Y200.0 Z0.3 F1500.0 E15 ; draw 1st line
    G1 X2 Y200.0 Z0.4 F5000.0 ; move to side a little
    G1 X2 Y20 Z0.4 F1500.0 E30 ; draw 2nd line
    G92 E0 ; reset extruder
    G1 Z1.0 F3000 ; move z up little to prevent scratching of surface
	
    PRINT MSG="{printer.print_stats.filename}"
	

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
	PRINT MSG="Done printing!"
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 E-2 Z0.2 F2400
    # Raise nozzle by 10mm
    G1 X5 Y5 F3000
	G1 Z50
    G90
	G1 X0 Y180
    # Disable steppers
    M84
	
	
[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_OLD
gcode:
    PRINT MSG="Aborted!"
    M300
    G91 ; relative
    G1 E-2 F300 ; retract
    {% if printer.toolhead.position.z <= 60 %}
        G90
        G0 Z70 F3000
        G91
    {% else %}
        G0 Z5 F3000
    {% endif %}

    G90
    G0 X30 Y170 F3000 ; park toolhead

    CLEAR_PAUSE
    TURN_OFF_HEATERS
    ;M84 ; disable steppers
    M107 ; fan off
    BED_MESH_CLEAR
    ;SET_FILAMENT_SENSOR SENSOR=bear_ir ENABLE=1
    CANCEL_PRINT_OLD
    SDCARD_RESET_FILE
    SET_FAN_SPEED FAN=filter_fan SPEED=1.0 ; filter fan max speed
    UPDATE_DELAYED_GCODE ID=TURN_OFF_FILTER_FAN_TIMER DURATION=600 ; set timer to turn off after 10 mins
	
[gcode_macro DISABLE_XY_MOTOR]
gcode:
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro UPDATE_BED_MESH]
gcode:
    PRINT MSG="Homing..."
    G28
    PRINT MSG="Aligning Z..."
    G34
    PRINT MSG="Probing..."
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    PRINT MSG="Saving..."
    SAVE_CONFIG
    
[delayed_gcode TURN_OFF_PSU]
initial_duration: 0.
gcode:
    {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
        {% if printer.extruder.temperature < 50 %}
            M84 ; disable steppers
            {action_call_remote_method("set_device_power", device="PSU", state="off")}
        {% else %}
            UPDATE_DELAYED_GCODE ID=TURN_OFF_PSU DURATION=300
        {% endif %}
    {% endif %}

[gcode_macro PRINT]
variable_MSG : ''
variable_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
         M117 {params.MSG | string}
    {% endif %}

[gcode_arcs]
#resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.



[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_area_start : 0,0
variable_area_end : 0,0
; the clearance between print area and probe area
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.area_start and params.area_end %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.area_start.split(",")[0]|float %}
        {% set area_min_y = params.area_start.split(",")[1]|float %}
        {% set area_max_x = params.area_end.split(",")[0]|float %}
        {% set area_max_y = params.area_end.split(",")[1]|float %}

        {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

        {% set meshMaxPointX = meshPointX %}
        {% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
            {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
            {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
	
[gcode_macro DUMP_VARS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
        {% if (name1 != "configfile") and (name1 != "bed_mesh" and name2!="mesh_matrix") and (name1 != "mcu" and name2!="mcu_constants") and (name1 != "mcu" and name2!="last_stats") and (name2 != "color_data") and (andm1 != "gcode_macro") %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
        {% else %}
            { action_respond_info("printer['%s'].%s = %s" % (name1, name2, "...")) }
        {% endif %}
      {% endfor %}
   {% endfor %}

[gcode_macro AUTO_SAVE_CONFIG]
gcode:
    {% if printer.configfile.save_config_pending %}
        PRINT MSG="Saving config"
        SAVE_CONFIG
    {% endif %}
	

[gcode_macro CHECK_MESH]
gcode:
    {% set ns = namespace(min_point = printer.bed_mesh.probed_matrix[0][0] ,max_point = printer.bed_mesh.probed_matrix[0][0]) %}

    {% for data_row in printer.bed_mesh.probed_matrix %}
        {% for probe_point in data_row %}
            {% if ns.min_point > probe_point %}
                {% set ns.min_point =  probe_point %}
            {% endif %}
            {% if ns.max_point < probe_point %}
                {% set ns.max_point =  probe_point %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    { action_respond_info( "Mesh delta : " + (ns.max_point - ns.min_point) | string)}
    {% if ns.max_point - ns.min_point > params.THRESHOLD|default(0.3)|float %}
        { action_respond_info("Mesh Error!")}
        ;CANCEL_PRINT
    {% else %}
        { action_respond_info("Mesh OK!")}
    {% endif %}

[gcode_macro DISPLAY_GCODE_PROGRESS]
variable_total_layer : 0
variable_current_layer : 0
variable_progress : 0
variable_remain : 0
gcode:
    #PRINT MSG="Layer:{params.current_layer}/{params.total_layer}  Progress:{params.progress}%  Remain:{params.remain}" OUTPUT_TARGET=1
    PRINT MSG="GCODE_PROGRESS,{params.current_layer}/{params.total_layer},{params.progress},{params.remain}" OUTPUT_TARGET=2

[gcode_macro SET_FILAMENT_PROFILE]
gcode:
  {% if params.TYPE|default("PLA") == "PLA" %}
    PRINT MSG="Set filament profile : PLA" OUTPUT_TARGET=1
    # M221 S91 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05
  {% elif params.TYPE|default("PLA") == "PETG" %}
    PRINT MSG="Set filament profile : PETG" OUTPUT_TARGET=1
    # M221 S91 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.08
  {% elif params.TYPE|default("PLA") == "ABS" %}
    PRINT MSG="Set filament profile : ABS" OUTPUT_TARGET=1
    # M221 S91 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.04
  {% elif params.TYPE|default("PLA") == "PC" %}
    PRINT MSG="Set filament profile : PC" OUTPUT_TARGET=1
    # M221 S91 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.07
  {% elif params.TYPE|default("PLA") == "CFPC" %}
    PRINT MSG="Set filament profile : CFPC" OUTPUT_TARGET=1
    # M221 S91 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.05
  {% else %}
    PRINT MSG="Set filament profile : Defalut" OUTPUT_TARGET=1
    # M221 S91 ; Tunned flow
    SET_PRESSURE_ADVANCE ADVANCE=0.00
  {% endif %}


[gcode_macro DEBUG]
gcode:
    {% set tmp = "this is test" %}
    PRINT MSG="{tmp.split(',')|length}"


#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*#     -0.055000, -0.015000, -0.027500, -0.015000, -0.025000
#*#     -0.015000, 0.012500, -0.070000, -0.010000, -0.095000
#*#     -0.042500, -0.005000, -0.005000, 0.000000, -0.027500
#*#     -0.087500, -0.012500, -0.055000, -0.055000, -0.020000
#*#     -0.107500, -0.012500, -0.045000, -0.017500, -0.050000
#*# tension = 0.2
#*# min_x = 30.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 5
#*# max_y = 190.0
#*# mesh_x_pps = 2
#*# max_x = 190.0
#*#
#*# [bltouch]
#*# z_offset = 1.870
